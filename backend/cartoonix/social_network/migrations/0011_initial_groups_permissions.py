# Generated by Django 5.1.3 on 2025-05-13 14:58

from django.db import migrations
from django.contrib.auth.management import create_permissions

def create_initial_groups_and_permissions(apps, schema_editor):
    Group = apps.get_model('auth', 'Group')
    Permission = apps.get_model('auth', 'Permission')
    ContentType = apps.get_model('contenttypes', 'ContentType')

    app_label = 'social_network'
    models_data = {
        'post': ['add_post', 'change_post', 'delete_post', 'view_post'],
        'comment': ['add_comment', 'change_comment', 'delete_comment', 'view_comment'],
        'profile': ['add_profile', 'change_profile', 'delete_profile', 'view_profile'],
        'friendrequest': ['add_friendrequest', 'change_friendrequest', 'delete_friendrequest', 'view_friendrequest'],
        'notification': ['add_notification', 'change_notification', 'delete_notification', 'view_notification'],
    }

    all_social_network_permissions = []
    for model_name, codenames in models_data.items():
        try:
            model_content_type = ContentType.objects.get(app_label=app_label, model=model_name)
            for codename in codenames:
                try:
                    perm = Permission.objects.get(codename=codename, content_type=model_content_type)
                    all_social_network_permissions.append(perm)
                except Permission.DoesNotExist:
                    print(f"Warning: Permission {codename} for model {model_name} not found. Skipping.")
        except ContentType.DoesNotExist:
            print(f"Warning: ContentType for model {model_name} in app {app_label} not found. Skipping model.")

    app_label_chat = 'chat'
    models_data_chat = {
        'message': ['add_message', 'change_message', 'delete_message', 'view_message'],
    }
    all_chat_permissions = []
    for model_name, codenames in models_data_chat.items():
        try:
            model_content_type = ContentType.objects.get(app_label=app_label_chat, model=model_name)
            for codename in codenames:
                try:
                    perm = Permission.objects.get(codename=codename, content_type=model_content_type)
                    all_chat_permissions.append(perm)
                except Permission.DoesNotExist:
                    print(f"Warning (chat): Permission {codename} for model {model_name} not found. Skipping.")
        except ContentType.DoesNotExist:
            print(f"Warning (chat): ContentType for model {model_name} not found. Skipping model.")

    app_label_ai = 'ai'
    models_data_ai = {
        'videoprompt': ['add_videoprompt', 'change_videoprompt', 'delete_videoprompt', 'view_videoprompt'],
    }
    all_ai_permissions = []
    for model_name, codenames in models_data_ai.items():
        try:
            model_content_type = ContentType.objects.get(app_label=app_label_ai, model=model_name)
            for codename in codenames:
                try:
                    perm = Permission.objects.get(codename=codename, content_type=model_content_type)
                    all_ai_permissions.append(perm)
                except Permission.DoesNotExist:
                    print(f"Warning (ai): Permission {codename} for model {model_name} not found. Skipping.")
        except ContentType.DoesNotExist:
            print(f"Warning (ai): ContentType for model {model_name} not found. Skipping model.")

    user_group, created = Group.objects.get_or_create(name='User')
    if created:
        print("Группа 'User' создана.")
    user_permissions_codenames = {
        'post': ['add_post', 'view_post'],
        'comment': ['add_comment', 'view_comment'],
        'profile': ['view_profile'],
        'friendrequest': ['add_friendrequest', 'view_friendrequest', 'change_friendrequest', 'delete_friendrequest'],
        'notification': ['view_notification', 'change_notification', 'delete_notification']
    }
    user_perms_to_assign = []
    for model_name, codenames in user_permissions_codenames.items():
        try:
            model_content_type = ContentType.objects.get(app_label=app_label, model=model_name)
            for codename in codenames:
                try:
                    perm = Permission.objects.get(codename=codename, content_type=model_content_type)
                    user_perms_to_assign.append(perm)
                except Permission.DoesNotExist:
                    print(f"Warning: Permission {codename} for model {model_name} not found for User group. Skipping.")
        except ContentType.DoesNotExist:
            print(f"Warning: ContentType for model {model_name} (User group) not found. Skipping.")
    user_group.permissions.set(user_perms_to_assign)
    print(f"Разрешения для группы 'User' установлены ({len(user_perms_to_assign)} шт).")

    user_permissions_chat_codenames = {
        'message': ['add_message', 'change_message', 'delete_message', 'view_message'],
    }
    for model_name, codenames in user_permissions_chat_codenames.items():
        try:
            model_content_type = ContentType.objects.get(app_label=app_label_chat, model=model_name)
            for codename in codenames:
                try:
                    perm = Permission.objects.get(codename=codename, content_type=model_content_type)
                    user_perms_to_assign.append(perm)
                except Permission.DoesNotExist:
                    print(f"Warning (User/chat): Permission {codename} for {model_name} not found.")
        except ContentType.DoesNotExist:
            print(f"Warning (User/chat): ContentType for {model_name} not found.")
            
    user_group.permissions.set(user_perms_to_assign)
    print(f"Разрешения для группы 'User' установлены ({len(user_perms_to_assign)} шт).")

    user_permissions_ai_codenames = {
        'videoprompt': ['add_videoprompt', 'view_videoprompt'],
    }
    for model_name, codenames in user_permissions_ai_codenames.items():
        try:
            model_content_type = ContentType.objects.get(app_label=app_label_ai, model=model_name)
            for codename in codenames:
                try:
                    perm = Permission.objects.get(codename=codename, content_type=model_content_type)
                    user_perms_to_assign.append(perm)
                except Permission.DoesNotExist:
                    print(f"Warning (User/ai): Permission {codename} for {model_name} not found.")
        except ContentType.DoesNotExist:
            print(f"Warning (User/ai): ContentType for {model_name} not found.")
            
    user_group.permissions.set(user_perms_to_assign)
    print(f"Разрешения для группы 'User' установлены ({len(user_perms_to_assign)} шт).")

    editor_group, created = Group.objects.get_or_create(name='Editor')
    if created:
        print("Группа 'Editor' создана.")
    editor_permissions_codenames = { 
        'post': ['add_post', 'change_post', 'delete_post', 'view_post'], 
        'comment': ['add_comment', 'change_comment', 'delete_comment', 'view_comment'], 
        'profile': ['view_profile'],
        'friendrequest': ['add_friendrequest', 'view_friendrequest', 'change_friendrequest', 'delete_friendrequest'],
        'notification': ['view_notification', 'change_notification', 'delete_notification']
    }
    editor_perms_to_assign = []
    for model_name, codenames in editor_permissions_codenames.items():
        try:
            model_content_type = ContentType.objects.get(app_label=app_label, model=model_name)
            for codename in codenames:
                try:
                    perm = Permission.objects.get(codename=codename, content_type=model_content_type)
                    editor_perms_to_assign.append(perm)
                except Permission.DoesNotExist:
                    print(f"Warning: Permission {codename} for model {model_name} not found for Editor group. Skipping.")
        except ContentType.DoesNotExist:
            print(f"Warning: ContentType for model {model_name} (Editor group) not found. Skipping.")
    editor_group.permissions.set(editor_perms_to_assign)
    print(f"Разрешения для группы 'Editor' установлены ({len(editor_perms_to_assign)} шт).")

    editor_permissions_chat_codenames = {
        'message': ['add_message', 'change_message', 'delete_message', 'view_message'],
    }
    for model_name, codenames in editor_permissions_chat_codenames.items():
        try:
            model_content_type = ContentType.objects.get(app_label=app_label_chat, model=model_name)
            for codename in codenames:
                try:
                    perm = Permission.objects.get(codename=codename, content_type=model_content_type)
                    editor_perms_to_assign.append(perm)
                except Permission.DoesNotExist:
                    print(f"Warning (Editor/chat): Permission {codename} for {model_name} not found.")
        except ContentType.DoesNotExist:
            print(f"Warning (Editor/chat): ContentType for {model_name} not found.")
            
    editor_group.permissions.set(editor_perms_to_assign)
    print(f"Разрешения для группы 'Editor' установлены ({len(editor_perms_to_assign)} шт).")

    editor_permissions_ai_codenames = {
        'videoprompt': ['add_videoprompt', 'change_videoprompt', 'delete_videoprompt', 'view_videoprompt'],
    }
    for model_name, codenames in editor_permissions_ai_codenames.items():
        try:
            model_content_type = ContentType.objects.get(app_label=app_label_ai, model=model_name)
            for codename in codenames:
                try:
                    perm = Permission.objects.get(codename=codename, content_type=model_content_type)
                    editor_perms_to_assign.append(perm)
                except Permission.DoesNotExist:
                    print(f"Warning (Editor/ai): Permission {codename} for {model_name} not found.")
        except ContentType.DoesNotExist:
            print(f"Warning (Editor/ai): ContentType for {model_name} not found.")
            
    editor_group.permissions.set(editor_perms_to_assign)
    print(f"Разрешения для группы 'Editor' установлены ({len(editor_perms_to_assign)} шт).")

    admin_group, created = Group.objects.get_or_create(name='Administrator')
    if created:
        print("Группа 'Administrator' создана.")
    all_permissions = all_social_network_permissions + all_chat_permissions + all_ai_permissions
    admin_group.permissions.set(all_permissions)
    print(f"Разрешения для группы 'Administrator' установлены ({len(all_permissions)} шт).")

def revert_initial_groups_and_permissions(apps, schema_editor):
    Group = apps.get_model('auth', 'Group')
    Group.objects.filter(name__in=['User', 'Editor', 'Administrator']).delete()
    print("Группы 'User', 'Editor', 'Administrator' удалены.")


class Migration(migrations.Migration):
    dependencies = [
        ('social_network', '0010_alter_friendrequest_unique_together_notification'),
        ('chat', '__first__'),
        ('ai', '__first__'),
    ]

    operations = [
        migrations.RunPython(create_initial_groups_and_permissions, reverse_code=revert_initial_groups_and_permissions),
    ]
